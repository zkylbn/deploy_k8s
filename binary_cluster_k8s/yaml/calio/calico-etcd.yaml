---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN1JTM0Vac0IrdHNLZ2k1bU9GclpwN080aXhWRVFZNThKbEtmOWwyWTVadUl5YUQ3CjVZYzFBZkJEQW9ISUcwYTQ0eG82emoxUDA5cDdQcFlvS1dTamtQd0c4NDdCOGZTQkJsZDhFbVlqOTZuOWMxeXMKaW9jTHVyZDdYTHF2K1FiQXlWeGo5VlMyb1lubUFXaTJXWkJPVURzczdUaFMzR2pkdEs0UjJ4UC9PT3lWcXdLNwpqaXkzN2V4dWh4OVg5dHNlem9rVmdkQVB6Y0NiaGd1a3ZoNDh3Q1JROUEvMStEN3ZYV3ZYMGNFQkJvYThsV1RmClA5akI0SmZnSEZtSjBhUlIyVC9qbDdhV3dkUW1hVHMxV1pKUncwQXpiTzR3VDFxREFPYTdGQ09CcHQ1cUo1QmUKM0tmNXZ2b0ttazRlT21UVU12VjJ1bWU4dWtUS05Hd0J6d1lvOFFJREFRQUJBb0lCQVFES2hzU3d6SHNQZ2VqagpOcUhxQ0dvZzRkMkhLcjZwUmYvMmVPVGZnQ3RxRWNqemZZdFNFNE9MeVdSbEV0c1B1Z1dkTTc0Q2lzdlR6Yk0wCnp1ODJGUnZKY2hLNkl6eTQ1Y2NHMU50UG1HT25ZVmI3SXJMZWorak1NNHUxdG1FM1diWjlEV2p5bmRCNkJLUXcKbGZRWVpMY1J3TXRyUm84NmJIYmdyMGJmb0tDSlRhVERacERuWE9jWGVaQy9LbkdBSDdsMStzRlBXREpHNVViNgpKRWxqYmVSWXZGNjRpVVp6VWUwejNxOXg5YjE0elBLZTFONUpJWEZsMTlVeS9QZXZxeXREbk8vYjJDdHpFTzViCkVLdHR2T3V3NVhQd095MjNlN3pQUC8xSGRLbnVPc1dsMDlWU0wrTVRyaStlK3RpK0hMTlAza3g2UXlLbkc5bzEKL05PcHYzYTFBb0dCQVBLVE5BNE0xYm1TVnRMOCs3bHQ0ZzFtdFJKNFRwd2UvcGFzRThkK3lTMnpyTXcwaXpkUwpmd2ZsQVBXTXphb240azRMSzcyNndGRGtZZzhPbCtMT2E5T0VuM3BENHV1ZXNtN2VUeDJSbkRmT1Bna2RXemQ1ClJZeEJUMThFREtmUDFJMEhONVRKZjNrL2s0YVUwaW5Ldi9yUjJkUzRuME5lYjhyUGdqMkhldDdiQW9HQkFQb3oKcSt5WUxsME5GU2tsa21nMGEwRHRDdFBYb2syMS9tM0pqM0grRnA3SExjSnloakxwNFdSVDNtcEMvTzl6dklBVQo1bjVRRVZHK1YxYXE0R3N2aHBscVYxb2NWQkprS0YwWnBNNjdLUzlqMGt5cjA2emdlNHVoSmI2NzdnbktFVGpECm4vd2hyMENVR1lMRzR4THg3amNsNjlvQ29GRkJaQUJYYWgwUmtXTWpBb0dCQU1vSnN3eVV3aG82K1pmbjM5MTAKMlJlaVdPUldVZHNVc2FWYkUycFFmazFUWG5RQ3U0VkxiOFJxaDE3OWRIcnBsMEs3YVNZd2VtZWxvTXE3cytQVApXOW1qbDVTbElFWnhPbHEvVEpQcktIc09pM3JaK1pSOXJHQ0NNUktKYytUOVpDSkdSWlBtTkFjUDNkYjA4d3FkCjlVSjZNSDFOZkZFSFFnTmd6REJsUEFDTEFuOHQ3MDZoSVU5aHhnVWNpTWxZV0VkWXBDeFl1RDRVQmxXdjBsR0QKbkNLTEJBWmlyS1AydFBtc2NibGp5T2luRFppTjYwaGw2RTFGdEt4VVBRcjJvc01UWjNLaUdKRld6d3lhQ3hzMgoyU1cyalowT2RuMW1QOUJ1MGljYjNXVFdaMExDS1NnMklma0s0aVhNM0xiVHc1YjRpUDNFQ0xkbU01c29kT1FHCmNqTS9Bb0dBWjl4V1FKZ3lCcEVCY3dhcGd0Y29ucXc3UmZSazRabklUMkcySG1EYmxUejQ3WjNCS25IMTdPSnIKRXhSNUc5ZGk0SjZ1cXVZaGtxRi9rbG1Icmo4dFdKMmFJMTJVVUhnQTBpUUpRRzF1Z2JWMi9VOUNMZUt4aWpTSQpjMkZhWVdTSXVFRndwY0tQaERxTEVSK2l3ZmZOZnMybHpFa0Y0MjRSMnpuZnExUE5leWM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg== 
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ2akNDQXRLZ0F3SUJBZ0lVTUs1d1JTWmpxVGpDVzBnVVFWb1pDaFdrRkVVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1h6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUTB3Q3dZRFZRUURFd1JsCmRHTmtNQjRYRFRJeE1EWXlNakE1TVRNd01Gb1hEVE14TURZeU1EQTVNVE13TUZvd1h6RUxNQWtHQTFVRUJoTUMKUTA0eEVEQU9CZ05WQkFnVEIwSmxhVXBwYm1jeEVEQU9CZ05WQkFjVEIwSmxhVXBwYm1jeEREQUtCZ05WQkFvVApBMnM0Y3pFUE1BMEdBMVVFQ3hNR1UzbHpkR1Z0TVEwd0N3WURWUVFERXdSbGRHTmtNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE3UlMzRVpzQit0c0tnaTVtT0ZyWnA3TzRpeFZFUVk1OEpsS2YKOWwyWTVadUl5YUQ3NVljMUFmQkRBb0hJRzBhNDR4bzZ6ajFQMDlwN1BwWW9LV1Nqa1B3Rzg0N0I4ZlNCQmxkOApFbVlqOTZuOWMxeXNpb2NMdXJkN1hMcXYrUWJBeVZ4ajlWUzJvWW5tQVdpMldaQk9VRHNzN1RoUzNHamR0SzRSCjJ4UC9PT3lWcXdLN2ppeTM3ZXh1aHg5WDl0c2V6b2tWZ2RBUHpjQ2JoZ3Vrdmg0OHdDUlE5QS8xK0Q3dlhXdlgKMGNFQkJvYThsV1RmUDlqQjRKZmdIRm1KMGFSUjJUL2psN2FXd2RRbWFUczFXWkpSdzBBemJPNHdUMXFEQU9hNwpGQ09CcHQ1cUo1QmUzS2Y1dnZvS21rNGVPbVRVTXZWMnVtZTh1a1RLTkd3Qnp3WW84UUlEQVFBQm80R2RNSUdhCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVU5T25kUXMxVm96SW9VT1Y1SGZKQkZXTWhNbzB3SHdZRApWUjBqQkJnd0ZvQVVjS3pTZUg3VGQ3Z3o0Tk9hVVJzYzdLR0hEMGN3R3dZRFZSMFJCQlF3RW9jRXJCRVQwWWNFCnJCR3V4b2NFckJHRWRqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFRWnV5SlJ4RGpCZEo3cUs2NW1ndlpwSG0KTkt2WWZ5VGJwaEZIWmNwU1dWMmd2T0twQ2ZpVWd6ZCsrQW5mR1pRN0lWYlpzZ3pBTDBzSitJVTNTcHBYWlZBbwpYMEFBQUVxcWMzdUxYSHFuY040T1ZWUlRqOTlwNjBsRlBYVWl6cEdCWDI2NWlKMndVeC9IZmF5cVQxdW8vREZ3Ck9UeVhvamMrYmpFVG5XdEJ0cjVtN1BpQ3lNeGw0Q0dnNDJ0d2lNVVREcm8vd1MvQVovVjdxcGFHYXVXeHpkNUQKdE45TFlxVlZDUnhHYmJJRjdPajRYS2VwOHBRRFVYa200TzdMeGFPSjQ5RU8ydmVKV2FlcDBLdEg2OU9vT2lJSwpOVlZ5WitRWXMvMndSQmxScEZ2U1F3aVcwWnl0RTRwZWlkNzJRekh1alQ3dU9uK2FrR29vSkJHMm9xRUZaUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K 
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURzakNDQXBxZ0F3SUJBZ0lVU1ZVeWJlZTlqZjJ6ck0zcjVqTVRjWE5rR2FVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1h6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUTB3Q3dZRFZRUURFd1JsCmRHTmtNQjRYRFRJeE1EWXlNakE1TVRNd01Gb1hEVEkyTURZeU1UQTVNVE13TUZvd1h6RUxNQWtHQTFVRUJoTUMKUTA0eEVEQU9CZ05WQkFnVEIwSmxhV3BwYm1jeEVEQU9CZ05WQkFjVEIwSmxhV3BwYm1jeEREQUtCZ05WQkFvVApBMnM0Y3pFUE1BMEdBMVVFQ3hNR1UzbHpkR1Z0TVEwd0N3WURWUVFERXdSbGRHTmtNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3TEZqNXRhbVhBWFV5V2t5bGxucDFpbG5GVC9Mak1qT25OOVIKZFpiV2p3bTFIWStXbkpTdTlDaHQ3UVBRdUpvM1dkL2ZVVWdiQkhZb0lPWjh5Y0NNdHBwdms5Mmg4MTdxb3hZcApZYXNQWGJMeGlPeDUrTTZLVG5sT2xrWWQrbnpPT0dpQWJyOGt0VWFVeVpzUWxteXR4T2JCMkZ3ZWJuaGNDb0pYCnhjOE5jbXdvVFRIVzhxMDVhY282aTBjanBsTm42VXdJSWNCNC9CMjVWakR2RXBld2VVc3lmUFhQT252YnMvcmEKL3hmaCtDSEtGN08vOUg2aW52ZFZQRnBLN0RucTNmTWU4M2R1dUgyREZicktPcUFKd1R2anRQODdTeS9ueSsrcApvUmVRcjlRRXNxeGUycW84Z3JGRHRldGVxaGFxdTBzbC8xTVc4SFZ5Z1p5d1owQzhHUUlEQVFBQm8yWXdaREFPCkJnTlZIUThCQWY4RUJBTUNBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQWpBZEJnTlZIUTRFRmdRVWNLelMKZUg3VGQ3Z3o0Tk9hVVJzYzdLR0hEMGN3SHdZRFZSMGpCQmd3Rm9BVWNLelNlSDdUZDdnejROT2FVUnNjN0tHSApEMGN3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUwwQnNyczUrZE5JaEtIeTJaeUVnS0FZbFUyS1ZGSUZhNlpUClVMNzFiV0lDbEQ3QTZhUlc1L3ZSelJpTGg4N2tzbENCRnVFRUlEcWw5RjljbnpSNmpwMmxJU0FuTE5LZElQV2MKNS9IaHBYb1poRTVpemtYNmE2NE8xQS9maFdsREp1cTJ3cGxCOTJ0bXBHRC9pMGhVemRJa0pibStoWFhMa0ZJZApoMENOeFJNK1pkV2k1VlhuT0V0RmR4d3QrR1NHVnFYL3pRWkM4WDFwU2Z3emNFMTduN3BKU3gwVjBxODhCVDQ1Cm4xRG8rZHA1NVMzaWFLTGYyLzVsSFVzRktvUmhpeUtuT0dhNkdWZk9mQ1krSUorSlJtdE5MNGRNK3pRWFpWNmIKMzhCSU9DS1NvM29DS2xsZVpNNGU5TUhGRmZGTExLK090N3ZNZXJ6OGlhdi81WXR5NWlFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== 
---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  #etcd_endpoints: "http://<ETCD_IP>:<ETCD_PORT>"
  etcd_endpoints: "https://172.17.19.209:2379,https://172.17.174.198:2379,https://172.17.132.118:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"

  # Configure the MTU to use for workload interfaces and tunnels.
  # By default, MTU is auto-detected, and explicitly setting this field should not be required.
  # You can override auto-detection by providing a non-zero value.
  veth_mtu: "0"

  # The CNI network configuration to install on each node. The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "log_file_path": "/var/log/calico/cni/cni.log",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
# Source: calico/templates/calico-kube-controllers-rbac.yaml

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---

---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: docker.io/calico/cni:v3.19.1
          command: ["/opt/cni/bin/install"]
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: docker.io/calico/pod2daemon-flexvol:v3.19.1
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: docker.io/calico/node:v3.19.1
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: IP_AUTODETECTION_METHOD
              value: "interface=eth.*"
            - name: KUBERNETES_SERVICE_HOST
              value: "172.17.19.209"
            - name: KUBERNETES_SERVICE_PORT
              value: "6443"
            - name: KUBERNETES_SERVICE_PORT_HTTPS
              value: "6443"
            - name: CALICO_IPV4POOL_CIDR
              value: "10.244.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: sysfs
              mountPath: /sys/fs/
              # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
              # If the host is known to mount that filesystem already then Bidirectional can be omitted.
              mountPropagation: Bidirectional
            - name: cni-log-dir
              mountPath: /var/log/calico/cni
              readOnly: true
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sysfs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used to access CNI logs.
        - name: cni-log-dir
          hostPath:
            path: /var/log/calico/cni
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: docker.io/calico/kube-controllers:v3.19.1
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            periodSeconds: 10
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0440

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

# This manifest creates a Pod Disruption Budget for Controller to allow K8s Cluster Autoscaler to evict

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers

---
# Source: calico/templates/calico-typha.yaml

---
# Source: calico/templates/configure-canal.yaml

---
# Source: calico/templates/kdd-crds.yaml


